name: DEV CI/CD

on:
  push:
    branches:
      - main
    tags:
      - 'development-**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1 - 소스코드 복사
      - name: Checkout source code
        uses: actions/checkout@v4

      # 2 - Node.js 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # 또는 프로젝트에서 사용하는 버전
          cache: 'npm'

      # 3 - 의존성 패키지 설치
      - name: Install Dependencies
        run: npm ci # npm install보다 빠르고 안전

      # 4 - 빌드
      - name: Build
        run: npm run export
        env:
          NODE_ENV: production

      # 5 - AWS 인증
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 6 - AWS S3에 빌드 결과물 배포
      - name: Deploy to S3
        run: |
          aws s3 sync ./out s3://${{ secrets.AWS_BUCKET_NAME }} \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"

          # HTML 파일은 별도로 캐시 설정
          aws s3 sync ./out s3://${{ secrets.AWS_BUCKET_NAME }} \
            --exclude "*" \
            --include "*.html" \
            --cache-control "public, max-age=0, must-revalidate"

      # 7 - CloudFront 캐시 무효화
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_DISTRIBUTION_ID }} \
            --paths "/*"
